# streamlit_app.py
import os
import re
from datetime import datetime

import streamlit as st
import streamlit.components.v1 as components
from openai import OpenAI

# =====================
# –°—Ç—Ä–∞–Ω–∏—Ü–∞
# =====================
st.set_page_config(page_title="HTML Transformer ‚Äî no fixes", page_icon="üß©", layout="wide")
st.markdown("""
<style>
  [data-testid="stSidebar"], [data-testid="collapsedControl"], header { display:none!important; }
  .block-container { padding-top: 2rem; }
  .stButton>button { height:48px; font-weight:600; }
</style>
""", unsafe_allow_html=True)

# =====================
# –ö–æ–Ω—Ñ–∏–≥/—Å–µ–∫—Ä–µ—Ç—ã
# =====================
OPENAI_KEY = st.secrets.get("OPENAI_API_KEY", "")

# ‚ù∂ –ö–ª—é—á–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤
SECRET_KEYS = {
    "RocketPlay": ["HTML_PROMPT_RP", "HTML_PROMPT"],            # —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –∫–ª—é—á–æ–º
    "WinSpirit / LuckyHills": ["HTML_PROMPT_WS_LH"],
    "Zoome": ["HTML_PROMPT_ZOOME"],
}

MODEL          = os.getenv("HTML_TRANSFORMER_MODEL", "gpt-4.1-mini")  # –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
PREVIEW_HEIGHT = int(os.getenv("HTML_PREVIEW_HEIGHT", "1200"))
PLACEHOLDER    = "–¢—É—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –≤—Å—Ç–∞–≤–∏–ª —é–∑–µ—Ä"          # –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤

# =====================
# Session State (–æ—á–∏—Å—Ç–∫–∞ –¥–æ –≤–∏–¥–∂–µ—Ç–æ–≤)
# =====================
st.session_state.setdefault("raw_text", "")
st.session_state.setdefault("result_text", None)
st.session_state.setdefault("do_clear", False)
st.session_state.setdefault("brand", "RocketPlay")

if st.session_state.get("do_clear"):
    st.session_state["raw_text"] = ""
    st.session_state["result_text"] = None
    st.session_state["do_clear"] = False

# =====================
# –•–µ–ª–ø–µ—Ä—ã
# =====================
def resolve_base_prompt(brand: str) -> tuple[str, str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (prompt, used_secret_key) –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞.
    –ë—Ä–æ—Å–∞–µ—Ç ValueError, –µ—Å–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–µ–∫—Ä–µ—Ç–∞ –Ω–µ—Ç.
    """
    keys = SECRET_KEYS.get(brand, [])
    for k in keys:
        v = st.secrets.get(k, "")
        if v:
            return v, k
    raise ValueError(
        f"–ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–æ–º–ø—Ç –¥–ª—è ¬´{brand}¬ª. –î–æ–±–∞–≤—å—Ç–µ —Å–µ–∫—Ä–µ—Ç(—ã): {', '.join(keys)}."
    )

def build_prompt(base_prompt: str, raw_text: str, brand: str | None = None) -> str:
    """
    –ù–∞–¥—ë–∂–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å—ã—Ä–æ–π —Ç–µ–∫—Å—Ç –≤–æ –í–°–ï –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å–µ–∫—Ä–µ—Ç–æ–≤:
    - RocketPlay: —Ç–æ—á–Ω–∞—è —Ñ—Ä–∞–∑–∞ –∏–ª–∏ [RAW CONTENT]
    - WinSpirit/LuckyHills: SOURCE_TEXT: <<...>> –∏–ª–∏ <<–í–°–¢–ê–í–¨ –ò–°–•–û–î–ù–´–ô –¢–ï–ö–°–¢>>
    - Zoome: –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ ¬´–í–•–û–î¬ª (—Å–∞–º —Ç–µ–∫—Å—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ)
    –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –∫–æ–Ω–µ—Ü —Å–µ–∫—Ä–µ—Ç–∞.
    """
    if not base_prompt:
        return raw_text

    rt = (raw_text or "").strip()
    out = base_prompt

    # 0) –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ä [RAW CONTENT] ‚Äî –≤—Å—Ç–∞–≤–∏—Ç—å –ù–ò–ñ–ï –º–µ—Ç–∫–∏
    out2 = re.sub(r"(\[RAW CONTENT\])", r"\1\n" + rt, out, count=1)
    if out2 != out:
        return out2

    # 1) RocketPlay ‚Äî –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—á–Ω–æ–π —Ñ—Ä–∞–∑—ã
    out2 = out.replace(PLACEHOLDER, rt)
    if out2 != out:
        return out2

    # 2) WinSpirit/LuckyHills ‚Äî —Ñ–æ—Ä–º–∞ SOURCE_TEXT: <<...>> (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —É–≥–ª–æ–≤—ã–µ —Å–∫–æ–±–∫–∏)
    out2 = re.sub(
        r"(SOURCE_TEXT:\s*<<)(.*?)(>>)",
        r"\1" + re.escape(rt) + r"\3",
        out,
        count=1,
        flags=re.DOTALL
    )
    if out2 != out:
        return out2

    # 2.1) –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–∞—Ä–∫–µ—Ä –±–µ–∑ SOURCE_TEXT
    out2 = out.replace("<<–í–°–¢–ê–í–¨ –ò–°–•–û–î–ù–´–ô –¢–ï–ö–°–¢>>", rt)
    if out2 != out:
        return out2

    # 3) Zoome ‚Äî –±–ª–æ–∫ ¬´–í–•–û–î¬ª –≤ –∫–æ–Ω—Ü–µ —Å–µ–∫—Ä–µ—Ç–∞; –≤—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ –í–•–û–î
    pattern_vhod = re.compile(r"(?:^|\n)–í–•–û–î\s*\n\s*$", flags=re.DOTALL)
    if pattern_vhod.search(out):
        return pattern_vhod.sub(lambda m: m.group(0) + rt + "\n", out, count=1)

    # 4) Fallback ‚Äî –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω–µ—Ü
    return out.rstrip() + "\n\n" + rt + "\n"

def strip_code_fences(t: str) -> str:
    t = (t or "").strip()
    if t.startswith("```"):
        t = t.split("\n", 1)[-1]
    if t.endswith("```"):
        t = t[:-3]
    return t.strip()

def call_openai(f_prompt: str) -> str:
    """
    –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–≤–æ–±–æ–¥–Ω—ã–π –≤—ã–∑–æ–≤ (–±–µ–∑ ¬´–∫—Ä–µ–∞—Ç–∏–≤–∞¬ª).
    Responses API c temperature=0 –∏ –∞–¥–µ–∫–≤–∞—Ç–Ω—ã–º —Ñ–æ–ª–±—ç–∫–æ–º –Ω–∞ Chat Completions (—Ç–æ–∂–µ temperature=0).
    """
    client = OpenAI(api_key=OPENAI_KEY)

    try:
        r = client.responses.create(
            model=MODEL,
            input=f_prompt,
            temperature=0,
            max_output_tokens=4096,
        )
        if getattr(r, "output_text", None):
            return strip_code_fences(r.output_text)
        if getattr(r, "output", None):
            parts = []
            for item in r.output:
                for c in getattr(item, "content", []) or []:
                    if getattr(c, "type", "") in ("output_text", "text"):
                        parts.append(getattr(c, "text", ""))
            if parts:
                return strip_code_fences("".join(parts))
        raise RuntimeError("Empty response")
    except Exception:
        c = client.chat.completions.create(
            model=MODEL,
            messages=[{"role": "user", "content": f_prompt}],
            temperature=0,
        )
        return strip_code_fences(c.choices[0].message.content)

def looks_like_html(s: str) -> bool:
    t = (s or "").strip().lower()
    return t.startswith("<!doctype") or (t.startswith("<") and "</" in t)

# =====================
# UI
# =====================
st.title("üß© HTML Transformer ‚Äî –ø—Ä–æ–º–ø—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π HTML")

# ‚ù∑ –í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞/–±—Ä–µ–Ω–¥–∞
brand_options = list(SECRET_KEYS.keys())
st.session_state["brand"] = st.selectbox(
    "–®–∞–±–ª–æ–Ω / –±—Ä–µ–Ω–¥",
    options=brand_options,
    index=brand_options.index(st.session_state.get("brand", "RocketPlay")),
)

raw = st.text_area(
    "–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç (–ø–æ–¥—Å—Ç–∞–≤–∏—Ç—Å—è –≤ –ø—Ä–æ–º–ø—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞)",
    key="raw_text", height=280, placeholder="–í—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç‚Ä¶",
)

c1, c2 = st.columns([1, 1])
with c1:
    generate = st.button("üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", type="primary", use_container_width=True)
with c2:
    if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å", use_container_width=True):
        st.session_state["do_clear"] = True
        st.rerun()

# –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã
if not OPENAI_KEY:
    st.error("–ù–µ –Ω–∞–π–¥–µ–Ω OPENAI_API_KEY –≤ secrets."); st.stop()

# –†–∞–∑—Ä–µ—à–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–∏–¥–µ—Ç—å, –∏–∑ –∫–∞–∫–æ–≥–æ —Å–µ–∫—Ä–µ—Ç–∞ –±–µ—Ä—ë–º –ø—Ä–æ–º–ø—Ç
try:
    BASE_PROMPT, USED_SECRET_KEY = resolve_base_prompt(st.session_state["brand"])
    st.caption(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–µ–∫—Ä–µ—Ç: **{USED_SECRET_KEY}**")
except ValueError as e:
    st.error(str(e)); st.stop()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è (–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤/–ø—Ä–∞–≤–æ–∫)
if generate:
    if not raw or not raw.strip():
        st.error("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.")
    else:
        with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è‚Ä¶"):
            try:
                prompt = build_prompt(BASE_PROMPT, raw.strip(), st.session_state.get("brand"))
                out = call_openai(prompt)
            except Exception as e:
                st.exception(e); st.stop()
            st.session_state["result_text"] = out

# –í—ã–≤–æ–¥ (—Ä–æ–≤–Ω–æ —Ç–æ, —á—Ç–æ –ø—Ä–∏—Å–ª–∞–ª–∞ –º–æ–¥–µ–ª—å)
out = st.session_state.get("result_text")
if out:
    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)")
    if looks_like_html(out):
        components.html(out, height=PREVIEW_HEIGHT, scrolling=True)
        st.download_button(
            "üíæ –°–∫–∞—á–∞—Ç—å –∫–∞–∫ HTML",
            out,
            file_name=f"output_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html",
            mime="text/html",
            use_container_width=True,
        )
    else:
        st.write(out)

    with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç"):
        st.code(out, language="html")

st.caption("–ó–¥–µ—Å—å –ù–ï–¢ –∞–≤—Ç–æ–ø—Ä–∞–≤–æ–∫ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–π. –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ –≤–∞—à HTML_PROMPT_* –≤ secrets. –î–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å—Ç—Ä–æ–≥–æ–≥–æ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω—É –º–æ–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–¥–Ω—è—Ç—å –º–æ–¥–µ–ª—å –¥–æ gpt-4.1.")
