# -*- coding: utf-8 -*-
"""
HTML Transformer ‚Äî –ø—Ä–æ–º–ø—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π HTML (–±–µ–∑ –∞–≤—Ç–æ–ø–æ—á–∏–Ω–æ–∫).
–°—Ç—Ä–∏–º–ª–∏—Ç-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –∞–∫–∫—É—Ä–∞—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏.
"""

from __future__ import annotations

import os
import re
from datetime import datetime
from typing import Dict, Iterable, Tuple

import streamlit as st
import streamlit.components.v1 as components
from openai import OpenAI


# =====================
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏
# =====================

APP_TITLE = "üß© HTML Transformer ‚Äî –ø—Ä–æ–º–ø—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π HTML"

# –ö–ª—é—á –≤ secrets –¥–ª—è API
OPENAI_KEY: str = st.secrets.get("OPENAI_API_KEY", "")

# ‚ù∂ –ö–ª—é—á–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤ (–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞)
SECRET_KEYS: Dict[str, Iterable[str]] = {
    "RocketPlay": ["HTML_PROMPT_RP", "HTML_PROMPT"],  # —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –∫–ª—é—á–æ–º
    "WinSpirit / LuckyHills": ["HTML_PROMPT_WS_LH"],
    "Zoome": ["HTML_PROMPT_ZOOME"],  # –Ω–æ–≤—ã–π –±—Ä–µ–Ω–¥
}

# –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
MODEL: str = os.getenv("HTML_TRANSFORMER_MODEL", "gpt-4.1-mini")
PREVIEW_HEIGHT: int = int(os.getenv("HTML_PREVIEW_HEIGHT", "1200"))

# –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ –Ω–æ–≤–æ–π —Å—Ö–µ–º–µ, –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
PLACEHOLDER = "–¢—É—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –≤—Å—Ç–∞–≤–∏–ª —é–∑–µ—Ä"


# =====================
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
# =====================

def setup_page() -> None:
    """–ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ CSS."""
    st.set_page_config(page_title="HTML Transformer ‚Äî no fixes", page_icon="üß©", layout="wide")
    st.markdown(
        """
        <style>
          [data-testid="stSidebar"], [data-testid="collapsedControl"], header { display:none!important; }
          .block-container { padding-top: 2rem; }
          .stButton>button { height:48px; font-weight:600; }
        </style>
        """,
        unsafe_allow_html=True,
    )


# =====================
# Session State helpers
# =====================

def init_session_state() -> None:
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–ª–∞–≥ –æ—á–∏—Å—Ç–∫–∏."""
    st.session_state.setdefault("raw_text", "")
    st.session_state.setdefault("result_text", None)
    st.session_state.setdefault("do_clear", False)
    st.session_state.setdefault("brand", "RocketPlay")

    if st.session_state.get("do_clear"):
        st.session_state["raw_text"] = ""
        st.session_state["result_text"] = None
        st.session_state["do_clear"] = False


# =====================
# –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞
# =====================

def resolve_base_prompt(brand: str) -> Tuple[str, str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (prompt, used_secret_key) –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞.
    –ë—Ä–æ—Å–∞–µ—Ç ValueError, –µ—Å–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–µ–∫—Ä–µ—Ç–∞ –Ω–µ—Ç.
    """
    keys = SECRET_KEYS.get(brand, [])
    for key in keys:
        val = st.secrets.get(key, "")
        if val:
            return val, key
    raise ValueError(f"–ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–æ–º–ø—Ç –¥–ª—è ¬´{brand}¬ª. –î–æ–±–∞–≤—å—Ç–µ —Å–µ–∫—Ä–µ—Ç(—ã): {', '.join(keys)}.")


# ---- –ù–æ–≤—ã–π –±–ª–æ–∫: –≥–æ—Ç–æ–≤–∏–º system-prompt —Å ¬´–°–¢–†–û–ì–ò–ú –ü–†–ò–ú–ï–†–û–ú¬ª, –Ω–µ –≤—ã—Ä–µ–∑–∞—è –µ–≥–æ

EXAMPLE_TITLE_RE = re.compile(r"(?:^|\n)\s*–°–¢–†–û–ì–ò–ô\s+–ü–†–ò–ú–ï–†\b", flags=re.IGNORECASE)

def prepare_system_prompt_with_example(base_prompt: str) -> str:
    """
    –ù–µ —É–¥–∞–ª—è–µ–º ¬´–°–¢–†–û–ì–ò–ô –ü–†–ò–ú–ï–†¬ª, –∞ –ø–æ–º–µ—á–∞–µ–º –µ–≥–æ –∫–∞–∫ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—é –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–ª–æ–≥,
    –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—Ä–µ—â–∞–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–∏–º–µ—Ä–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π SOURCE_TEXT
    –ø—Ä–∏–¥—ë—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º user-—Å–æ–æ–±—â–µ–Ω–∏–µ–º.
    """
    # –ü–æ–º–µ—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–º–µ—Ä–∞ (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
    marked = EXAMPLE_TITLE_RE.sub(
        "\n–°–¢–†–û–ì–ò–ô –ü–†–ò–ú–ï–† (–î–ê–ù–ù–´–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –ù–ï–õ–¨–ó–Ø ‚Äî –¢–û–õ–¨–ö–û –ò–õ–õ–Æ–°–¢–†–ê–¶–ò–Ø)\n",
        base_prompt,
    )

    preface = (
        "–í–ê–ñ–ù–û:\n"
        "1) –°–µ–∫—Ü–∏—è ¬´–°–¢–†–û–ì–ò–ô –ü–†–ò–ú–ï–†¬ª –ø—Ä–∏–≤–µ–¥–µ–Ω–∞ –¢–û–õ–¨–ö–û –¥–ª—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∞.\n"
        "   –ß–ò–°–õ–ê/–ë–†–ï–ù–î–´/–î–ê–¢–´ –∏–∑ –ø—Ä–∏–º–µ—Ä–∞ –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –ù–ï–õ–¨–ó–Ø.\n"
        "2) –ó–∞–ø–æ–ª–Ω—è–π —à–∞–±–ª–æ–Ω –¢–û–õ–¨–ö–û –ø–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–º—É SOURCE_TEXT –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
        "3) –í–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ –æ–¥–∏–Ω HTML-–¥–æ–∫—É–º–µ–Ω—Ç –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ Markdown.\n"
    )
    return f"{preface}\n{marked}".strip()


def strip_code_fences(text: str) -> str:
    """
    –£–±–∏—Ä–∞–µ—Ç –æ–±—Ä–∞–º–ª–µ–Ω–∏–µ ```...``` –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –∫–æ–¥–æ–º.
    """
    t = (text or "").strip()
    if t.startswith("```"):
        # –û—Ç—Ä–µ–∑–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Å ```<lang>? –∏ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        t = t.split("\n", 1)[-1]
    if t.endswith("```"):
        t = t[:-3]
    return t.strip()


def call_openai_with_messages(system_prompt: str, user_text: str) -> str:
    """
    –ñ—ë—Å—Ç–∫–∞—è —Å—Ö–µ–º–∞: system = –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏/—à–∞–±–ª–æ–Ω/–ø—Ä–∏–º–µ—Ä, user = —Ä–µ–∞–ª—å–Ω—ã–π SOURCE_TEXT.
    –ù–∏–∫–∞–∫–∏—Ö –∞–≤—Ç–æ–ø–æ—á–∏–Ω–æ–∫, —Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç–æ–±—Ä–µ–∑–∫–∞ —Ç—Ä–æ–π–Ω—ã—Ö –±—ç–∫—Ç–∏–∫–æ–≤.
    """
    client = OpenAI(api_key=OPENAI_KEY)

    # Responses API
    try:
        r = client.responses.create(
            model=MODEL,
            input=[
                {"role": "system", "content": system_prompt},
                {"role": "user",   "content": f"SOURCE_TEXT:\n{user_text}"},
            ],
        )

        # –ü—Ä—è–º–æ–µ –ø–æ–ª–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ (–Ω–æ–≤—ã–µ SDK)
        if getattr(r, "output_text", None):
            return strip_code_fences(r.output_text)

        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–±–æ—Ä –∫—É—Å–æ—á–∫–æ–≤
        if getattr(r, "output", None):
            parts: list[str] = []
            for item in r.output:
                for c in getattr(item, "content", []) or []:
                    if getattr(c, "type", "") in ("output_text", "text"):
                        parts.append(getattr(c, "text", ""))
            if parts:
                return strip_code_fences("".join(parts))

        raise RuntimeError("Empty response")
    except Exception:
        # Chat Completions fallback (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
        c = client.chat.completions.create(
            model=MODEL,
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user",   "content": f"SOURCE_TEXT:\n{user_text}"},
            ],
        )
        return strip_code_fences(c.choices[0].message.content)


def looks_like_html(s: str) -> bool:
    """–û—á–µ–Ω—å –≥—Ä—É–±–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è HTML."""
    t = (s or "").strip().lower()
    return t.startswith("<!doctype") or (t.startswith("<") and "</" in t)


# =====================
# UI
# =====================

def render_header() -> None:
    st.title(APP_TITLE)


def render_controls() -> Tuple[str, str, bool]:
    """
    –†–µ–Ω–¥–µ—Ä–∏—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂:
    (brand, raw_text, generate_clicked)
    """
    # ‚ù∑ –í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞/–±—Ä–µ–Ω–¥–∞
    brands = list(SECRET_KEYS.keys())
    st.session_state["brand"] = st.selectbox(
        "–®–∞–±–ª–æ–Ω / –±—Ä–µ–Ω–¥",
        options=brands,
        index=brands.index(st.session_state.get("brand", "RocketPlay")),
    )

    raw = st.text_area(
        "–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç (–ø–æ–¥—Å—Ç–∞–≤–∏—Ç—Å—è –≤ –ø—Ä–æ–º–ø—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞)",
        key="raw_text",
        height=280,
        placeholder="–í—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç‚Ä¶",
    )

    col_left, col_right = st.columns([1, 1])

    with col_left:
        generate = st.button("üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", type="primary", use_container_width=True)

    with col_right:
        if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å", use_container_width=True):
            st.session_state["do_clear"] = True
            st.rerun()

    return st.session_state["brand"], raw, generate


def guard_secrets() -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤."""
    if not OPENAI_KEY:
        st.error("–ù–µ –Ω–∞–π–¥–µ–Ω OPENAI_API_KEY –≤ secrets.")
        st.stop()


def render_result(out: str) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–≤–Ω–æ –≤ —Ç–æ–º –≤–∏–¥–µ, –∫–∞–∫ –≤–µ—Ä–Ω—É–ª–∞ –º–æ–¥–µ–ª—å."""
    if not out:
        return

    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)")

    if looks_like_html(out):
        components.html(out, height=PREVIEW_HEIGHT, scrolling=True)
        st.download_button(
            "üíæ –°–∫–∞—á–∞—Ç—å –∫–∞–∫ HTML",
            out,
            file_name=f"output_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html",
            mime="text/html",
            use_container_width=True,
        )
    else:
        st.write(out)

    with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç"):
        st.code(out, language="html")

    st.caption(
        "–ó–¥–µ—Å—å –ù–ï–¢ –∞–≤—Ç–æ–ø—Ä–∞–≤–æ–∫ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–π. –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç ‚Äî "
        "–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ –≤–∞—à HTML_PROMPT_* –≤ secrets."
    )


# =====================
# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
# =====================

def main() -> None:
    setup_page()
    init_session_state()
    render_header()

    brand, raw, generate = render_controls()
    guard_secrets()

    # –†–∞–∑—Ä–µ—à–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–∏–¥–µ—Ç—å, –∏–∑ –∫–∞–∫–æ–≥–æ —Å–µ–∫—Ä–µ—Ç–∞ –±–µ—Ä—ë–º –ø—Ä–æ–º–ø—Ç
    try:
        base_prompt, used_secret_key = resolve_base_prompt(brand)
        st.caption(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–µ–∫—Ä–µ—Ç: **{used_secret_key}**")
    except ValueError as e:
        st.error(str(e))
        st.stop()

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è (–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤/–ø—Ä–∞–≤–æ–∫)
    if generate:
        if not raw or not raw.strip():
            st.error("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.")
        else:
            with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è‚Ä¶"):
                try:
                    system_prompt = prepare_system_prompt_with_example(base_prompt)
                    out = call_openai_with_messages(system_prompt, raw.strip())
                    st.session_state["result_text"] = out
                except Exception as e:  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–µ–∫ –≤ dev-—Ä–µ–∂–∏–º–µ
                    st.exception(e)
                    st.stop()

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (—Ä–æ–≤–Ω–æ —Ç–æ, —á—Ç–æ –ø—Ä–∏—Å–ª–∞–ª–∞ –º–æ–¥–µ–ª—å)
    render_result(st.session_state.get("result_text"))


if __name__ == "__main__":
    main()
