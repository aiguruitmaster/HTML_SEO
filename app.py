import os
import re
from datetime import datetime

import streamlit as st
import streamlit.components.v1 as components
from openai import OpenAI

# ---------- Page config ----------
st.set_page_config(
    page_title="HTML Transformer (GPT‚Äë5)",
    page_icon="üß©",
    layout="wide",
)

st.title("üß© HTML Transformer ‚Äî Streamlit + OpenAI Responses API")
st.caption(
    "–í—Å—Ç–∞–≤—å—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç ‚Üí –º–æ–¥–µ–ª—å –≤–µ—Ä–Ω—ë—Ç –æ–¥–∏–Ω HTML‚Äë–±–ª–æ–∫ –ø–æ –≤–∞—à–µ–º—É —à–∞–±–ª–æ–Ω—É."
)

# ---------- Secrets & config ----------
# –¢—Ä–µ–±—É–µ–º—ã–µ —Å–µ–∫—Ä–µ—Ç—ã –≤ .streamlit/secrets.toml:
# OPENAI_API_KEY = "sk-..."
# HTML_PROMPT = """
#   <–í–ï–°–¨ –í–ê–® –ü–†–û–ú–ü–¢ –ò–ó –°–û–û–ë–©–ï–ù–ò–Ø>
# """

OPENAI_KEY = st.secrets.get("OPENAI_API_KEY", "")
BASE_PROMPT = st.secrets.get("HTML_PROMPT", "")

if not OPENAI_KEY:
    st.error(
        "–ù–µ –Ω–∞–π–¥–µ–Ω OPENAI_API_KEY –≤ secrets. –î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á –≤ .streamlit/secrets.toml –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")
if not BASE_PROMPT:
    st.warning(
        "–ù–µ –Ω–∞–π–¥–µ–Ω HTML_PROMPT –≤ secrets. –í—Å—Ç–∞–≤—å—Ç–µ —Ç—É–¥–∞ –≤–∞—à –ø—Ä–æ–º–ø—Ç (–≤–∫–ª—é—á–∞—è RAW CONTENT –∏ TARGET HTML TEMPLATE)."
    )

# ---------- Sidebar ----------
st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
model = st.sidebar.selectbox(
    "–ú–æ–¥–µ–ª—å",
    options=["gpt-5", "gpt-5-mini", "gpt-5-nano"],
    index=0,
    help="–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø –∫ —Å–µ–º–µ–π—Å—Ç–≤—É GPT‚Äë5 –≤ API.",
)
max_output_tokens = st.sidebar.slider(
    "max_output_tokens",
    min_value=512,
    max_value=8192,
    value=4096,
    step=256,
    help="–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —Ä–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏.",
)

temperature = st.sidebar.slider(
    "temperature",
    min_value=0.0,
    max_value=1.0,
    value=0.2,
    step=0.05,
    help="–ù–∏–∂–µ = —Å—Ç—Ä–æ–∂–µ —Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω—É.",
)

preview_height = st.sidebar.slider(
    "–í—ã—Å–æ—Ç–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (px)", 600, 2400, 1200, 50
)

st.sidebar.markdown(
    "**–ü–æ–¥—Å–∫–∞–∑–∫–∞:** –¥–µ—Ä–∂–∏—Ç–µ –ø—Ä–æ–º–ø—Ç –≤ `HTML_PROMPT` –∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–π—Ç–µ —Å—ã—Ä–æ–π —Ç–µ–∫—Å—Ç —Å—é–¥–∞ ‚Äî –∫–æ–¥ —Å–∞–º –∑–∞–º–µ–Ω–∏—Ç placeholder."
)

# ---------- Helpers ----------

def build_prompt(raw_text: str) -> str:
    """–ü–æ–¥—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –≤ —Å–µ–∫—Ü–∏—é [RAW CONTENT].
    –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –ø—Ä–æ–º–ø—Ç–µ –µ—Å—Ç—å —Ñ—Ä–∞–∑–∞-–ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
    "–¢—É—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –≤—Å—Ç–∞–≤–∏–ª —é–∑–µ—Ä".
    """
    placeholder = "–¢—É—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –≤—Å—Ç–∞–≤–∏–ª —é–∑–µ—Ä"
    if placeholder not in BASE_PROMPT:
        # –ú—è–≥–∫–∞—è –ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞: –µ—Å–ª–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –¥–æ–±–∞–≤–∏–º [RAW CONTENT] –≤ –∫–æ–Ω–µ—Ü
        return f"{BASE_PROMPT}\n\n[RAW CONTENT]\n{raw_text}\n"
    return BASE_PROMPT.replace(placeholder, raw_text)


def call_openai(final_prompt: str) -> str:
    client = OpenAI(api_key=OPENAI_KEY)
    response = client.responses.create(
        model=model,
        input=final_prompt,
        max_output_tokens=max_output_tokens,
        temperature=temperature,
    )
    # –í Responses API –µ—Å—Ç—å —É–¥–æ–±–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ
    return response.output_text


def validate_markup(html_text: str) -> dict:
    """–ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º —à–∞–±–ª–æ–Ω–∞.
    –≠—Ç–æ –ø—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º, –±–µ–∑ —Ç—è–∂—ë–ª—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
    """
    issues = []

    trimmed = html_text.strip()
    if not (trimmed.startswith("<") and trimmed.endswith(">")):
        issues.append("–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '<' –∏–ª–∏/–∏ –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è '>'")

    if 'class="markup-seo-page"' not in trimmed:
        issues.append("–ù–µ –Ω–∞–π–¥–µ–Ω <div class=\"markup-seo-page\">")

    # –°—á—ë—Ç—á–∏–∫–∏ —Ç–µ–≥–æ–≤
    anchors = len(re.findall(r"<a\b", trimmed, flags=re.I))
    if anchors != 7:
        issues.append(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ <a>: {anchors} (–æ–∂–∏–¥–∞–ª–æ—Å—å 7)")

    em_count = len(re.findall(r"<em\b", trimmed, flags=re.I))
    if em_count != 1:
        issues.append(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ <em>: {em_count} (–æ–∂–∏–¥–∞–ª–æ—Å—å 1)")

    tables = re.findall(r"<table[\s\S]*?</table>", trimmed, flags=re.I)
    if len(tables) != 3:
        issues.append(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ <table>: {len(tables)} (–æ–∂–∏–¥–∞–ª–æ—Å—å 3)")
    else:
        row_targets = [6, 3, 10]
        for i, tbl in enumerate(tables):
            rows = len(re.findall(r"<tr\b", tbl, flags=re.I))
            if rows != row_targets[i]:
                issues.append(
                    f"–¢–∞–±–ª–∏—Ü–∞ #{i+1}: {rows} —Å—Ç—Ä–æ–∫(–∏) (–æ–∂–∏–¥–∞–ª–æ—Å—å {row_targets[i]})"
                )

    # FAQ –±–ª–æ–∫–∏: —Å—á–∏—Ç–∞–µ–º label.faq-accordion__item
    faq_blocks = len(re.findall(r"<label\b[^>]*faq-accordion__item", trimmed, flags=re.I))
    if faq_blocks != 5:
        issues.append(f"FAQ –±–ª–æ–∫–∏: {faq_blocks} (–æ–∂–∏–¥–∞–ª–æ—Å—å 5)")

    return {
        "ok": len(issues) == 0,
        "issues": issues,
        "length": len(trimmed),
    }


# ---------- UI ----------
raw = st.text_area(
    "–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç (–±—É–¥–µ—Ç –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω –≤ [RAW CONTENT])",
    min_height=240,
    placeholder="–í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç –∑–¥–µ—Å—å‚Ä¶",
)

col_run, col_save = st.columns([1, 1])

with col_run:
    generate = st.button("üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å HTML", type="primary", use_container_width=True)

with col_save:
    clear_btn = st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å", use_container_width=True)

if clear_btn:
    st.session_state.pop("generated_html", None)
    st.experimental_rerun()

if generate:
    if not raw.strip():
        st.error("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
    elif not OPENAI_KEY or not BASE_PROMPT:
        st.error("–ù—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å OPENAI_API_KEY –∏ HTML_PROMPT –≤ secrets.")
    else:
        with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è‚Ä¶"):
            prompt = build_prompt(raw.strip())
            try:
                html_block = call_openai(prompt)
            except Exception as e:
                st.exception(e)
                st.stop()
            st.session_state["generated_html"] = html_block

# ---------- Output ----------
if html := st.session_state.get("generated_html"):
    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç")

    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    report = validate_markup(html)
    if report["ok"]:
        st.success("–ü—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã ‚úì")
    else:
        st.warning("–ï—Å—Ç—å –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è:")
        for item in report["issues"]:
            st.write("‚Ä¢ ", item)

    # –ö–Ω–æ–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    file_name = f"markup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html"
    st.download_button(
        label="üíæ –°–∫–∞—á–∞—Ç—å HTML",
        data=html,
        file_name=file_name,
        mime="text/html",
        use_container_width=True,
    )

    # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä: –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π st.html,
    # –∏–Ω–∞—á–µ ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π components.html –≤ iframe.
    st.divider()
    st.subheader("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä")
    if hasattr(st, "html"):
        # Streamlit 1.39+ –≤–≤—ë–ª st.html (–±–µ–∑ iframe)
        st.html(html)
    else:
        components.html(html, height=preview_height, scrolling=True)

    with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å —á–∏—Å—Ç—ã–π HTML"):
        st.code(html, language="html")

st.caption(
    "‚ÑπÔ∏è –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: –º–æ–¥–µ–ª—å –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω HTML‚Äë–±–ª–æ–∫, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å <div class=\"markup-seo-page\"> –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏–π—Å—è </div>."
)
