import os
from datetime import datetime

import streamlit as st
import streamlit.components.v1 as components
from openai import OpenAI

# =============== –ë–ê–ó–ê –°–¢–†–ê–ù–ò–¶–´ ===============
st.set_page_config(page_title="HTML Free Transformer", page_icon="üß©", layout="wide")
st.markdown("""
<style>
  [data-testid="stSidebar"], [data-testid="collapsedControl"], header { display:none!important; }
  .block-container { padding-top: 2rem; }
  .stButton>button { height:48px; font-weight:600; }
</style>
""", unsafe_allow_html=True)

# =============== –°–ï–ö–†–ï–¢–´/–ù–ê–°–¢–†–û–ô–ö–ò ===============
OPENAI_KEY  = st.secrets.get("OPENAI_API_KEY", "")
BASE_PROMPT = st.secrets.get("HTML_PROMPT", "")  # –µ—Å–ª–∏ –µ—Å—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –º—è–≥–∫–æ–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ, –ë–ï–ó –∂—ë—Å—Ç–∫–∏—Ö –ø—Ä–∞–≤–∏–ª

MODEL          = os.getenv("HTML_TRANSFORMER_MODEL", "gpt-4o-mini")
PREVIEW_HEIGHT = int(os.getenv("HTML_PREVIEW_HEIGHT", "1200"))
PLACEHOLDER    = "–¢—É—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –≤—Å—Ç–∞–≤–∏–ª —é–∑–µ—Ä"

# =============== SESSION STATE (–û–ß–ò–°–¢–ö–ê –î–û –í–ò–î–ñ–ï–¢–û–í) ===============
st.session_state.setdefault("raw_text", "")
st.session_state.setdefault("generated_text", None)
st.session_state.setdefault("do_clear", False)

if st.session_state.get("do_clear"):
    st.session_state["raw_text"] = ""
    st.session_state["generated_text"] = None
    st.session_state["do_clear"] = False

# =============== –•–ï–õ–ü–ï–†–´ ===============
def build_prompt(raw_text: str) -> str:
    """–ù–∏–∫–∞–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π: –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –º—è–≥–∫–∏–π –ø—Ä–æ–º–ø—Ç (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)."""
    if not BASE_PROMPT:
        return raw_text
    if PLACEHOLDER in BASE_PROMPT:
        return BASE_PROMPT.replace(PLACEHOLDER, raw_text)
    return f"{BASE_PROMPT}\n\n{raw_text}"

def strip_code_fences(t: str) -> str:
    t = (t or "").strip()
    if t.startswith("```"):
        # —É–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç—Ä–æ–π–Ω—ã–µ –±—ç–∫—Ç–∏–∫–∏
        t = t.split("\n", 1)[-1]
    if t.endswith("```"):
        t = t[:-3]
    return t.strip()

def call_openai(f_prompt: str) -> str:
    """–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –≤—ã–∑–æ–≤: –±–µ–∑ temperature, –±–µ–∑ max_tokens ‚Äî –¥–∞—ë–º –º–æ–¥–µ–ª–∏ —Å–≤–æ–±–æ–¥—É.
       –§–æ–ª–±—ç–∫ –Ω–∞ chat.completions, –µ—Å–ª–∏ Responses API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."""
    client = OpenAI(api_key=OPENAI_KEY)

    # Responses API
    try:
        resp = client.responses.create(model=MODEL, input=f_prompt)
        if hasattr(resp, "output_text") and resp.output_text:
            return strip_code_fences(resp.output_text)
        # —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        if getattr(resp, "output", None):
            parts = []
            for item in resp.output:
                for c in getattr(item, "content", []) or []:
                    if getattr(c, "type", "") in ("output_text", "text"):
                        parts.append(getattr(c, "text", ""))
            if parts:
                return strip_code_fences("".join(parts))
        raise RuntimeError("Empty response body")
    except Exception:
        # Chat Completions (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
        resp = client.chat.completions.create(
            model=MODEL,
            messages=[{"role": "user", "content": f_prompt}],
        )
        return strip_code_fences(resp.choices[0].message.content)

def looks_like_html(s: str) -> bool:
    t = (s or "").strip().lower()
    return t.startswith("<!doctype") or (t.startswith("<") and "</" in t)

# =============== UI ===============
st.title("üß© HTML Free Transformer ‚Äî –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π")

raw = st.text_area(
    "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç/–ø—Ä–æ–º–ø—Ç (–µ—Å–ª–∏ —ç—Ç–æ HTML, –ø–æ–∫–∞–∂–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä)",
    key="raw_text",
    height=280,
    placeholder="–í—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏–ª–∏ –ø—Ä–æ–º–ø—Ç‚Ä¶",
)

col1, col2 = st.columns([1, 1])
with col1:
    generate = st.button("üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", type="primary", use_container_width=True)
with col2:
    if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å", use_container_width=True):
        st.session_state["do_clear"] = True
        st.rerun()

# –ö–ª—é—á –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
if not OPENAI_KEY:
    st.error("–ù–µ –Ω–∞–π–¥–µ–Ω OPENAI_API_KEY –≤ secrets.")
    st.stop()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è
if generate:
    if not raw or not raw.strip():
        st.error("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.")
    else:
        with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è‚Ä¶"):
            try:
                prompt = build_prompt(raw.strip())
                result = call_openai(prompt)
            except Exception as e:
                st.exception(e)
                st.stop()
            st.session_state["generated_text"] = result

# –í—ã–≤–æ–¥
out = st.session_state.get("generated_text")
if out:
    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç")
    if looks_like_html(out):
        components.html(out, height=PREVIEW_HEIGHT, scrolling=True)
        st.download_button(
            "üíæ –°–∫–∞—á–∞—Ç—å –∫–∞–∫ HTML",
            out,
            file_name=f"output_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html",
            mime="text/html",
            use_container_width=True,
        )
    else:
        st.write(out)

    with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç"):
        st.code(out, language="html")

st.caption("–°–≤–æ–±–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º: –±–µ–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä, –±–µ–∑ –ª–∏–º–∏—Ç–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤ –∏ –±–µ–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–π. –ß—Ç–æ –ø—Ä–∏—à–ª–æ ‚Äî —Ç–æ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º.")
