import os
import re
from datetime import datetime

import streamlit as st
import streamlit.components.v1 as components
from openai import OpenAI

# =====================
# –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
# =====================
st.set_page_config(
    page_title="HTML Transformer",
    page_icon="üß©",
    layout="wide",
    initial_sidebar_state="collapsed",
)
st.markdown(
    """
    <style>
      [data-testid="stSidebar"], [data-testid="collapsedControl"], header { display: none !important; }
      .block-container { padding-top: 2rem; }
      .stButton>button { height: 48px; font-weight: 600; }
    </style>
    """,
    unsafe_allow_html=True,
)

# =====================
# –°–µ–∫—Ä–µ—Ç—ã –∏ —Ö–∞—Ä–¥-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏
# =====================
OPENAI_KEY  = st.secrets.get("OPENAI_API_KEY", "")
BASE_PROMPT = st.secrets.get("HTML_PROMPT", "")

MODEL             = os.getenv("HTML_TRANSFORMER_MODEL", "gpt-4o-mini")  # –ø–æ—Å—Ç–∞–≤—å—Ç–µ —Ä–∞–±–æ—á—É—é –º–æ–¥–µ–ª—å
MAX_OUTPUT_TOKENS = int(os.getenv("HTML_MAX_OUTPUT_TOKENS", "2048"))
PREVIEW_HEIGHT    = int(os.getenv("HTML_PREVIEW_HEIGHT", "1200"))
MAX_RAW_CHARS     = int(os.getenv("HTML_MAX_RAW_CHARS", "200000"))
PLACEHOLDER       = "–¢—É—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –≤—Å—Ç–∞–≤–∏–ª —é–∑–µ—Ä"

# =====================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø STATE + –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –û–ß–ò–°–¢–ö–ê (–î–û –í–ò–î–ñ–ï–¢–û–í)
# =====================
def _init_state():
    st.session_state.setdefault("raw_text", "")
    st.session_state.setdefault("generated_html", None)
    st.session_state.setdefault("do_clear", False)

_init_state()

# –µ—Å–ª–∏ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –∫–ª–∏–∫–µ –Ω–∞–∂–∞–ª–∏ "–û—á–∏—Å—Ç–∏—Ç—å" ‚Äî —á–∏—Å—Ç–∏–º —Å–µ–π—á–∞—Å –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
if st.session_state.get("do_clear"):
    st.session_state["raw_text"] = ""
    st.session_state["generated_html"] = None
    st.session_state["do_clear"] = False

# =====================
# –•–µ–ª–ø–µ—Ä—ã
# =====================
def build_prompt(raw_text: str) -> str:
    if PLACEHOLDER in BASE_PROMPT:
        return BASE_PROMPT.replace(PLACEHOLDER, raw_text)
    return f"{BASE_PROMPT}\n\n[RAW CONTENT]\n{raw_text}\n"

def _strip_code_fences(t: str) -> str:
    t = t.strip()
    if t.startswith("```"):
        t = re.sub(r"^```[a-zA-Z0-9]*\n?", "", t, flags=re.S)
    if t.endswith("```"):
        t = t[:-3]
    return t.strip()

def call_openai(final_prompt: str) -> str:
    """–ü—Ä–æ–±—É–µ–º Responses API ‚Üí –ø—Ä–∏ –æ—à–∏–±–∫–µ —Ñ–æ–ª–±—ç–∫ –Ω–∞ chat.completions. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç."""
    client = OpenAI(api_key=OPENAI_KEY)
    # Responses API
    try:
        resp = client.responses.create(
            model=MODEL,
            input=final_prompt,
            max_output_tokens=MAX_OUTPUT_TOKENS,
        )
        if hasattr(resp, "output_text") and resp.output_text:
            return _strip_code_fences(resp.output_text)
        if getattr(resp, "output", None):
            parts = []
            for item in resp.output:
                for c in getattr(item, "content", []) or []:
                    if getattr(c, "type", "") in ("output_text", "text"):
                        parts.append(getattr(c, "text", ""))
            if parts:
                return _strip_code_fences("".join(parts))
        raise RuntimeError("Responses API: empty content")
    except Exception:
        # Chat Completions
        resp = client.chat.completions.create(
            model=MODEL,
            messages=[{"role": "user", "content": final_prompt}],
            max_tokens=MAX_OUTPUT_TOKENS,
        )
        return _strip_code_fences(resp.choices[0].message.content)

def extract_markup(text: str) -> str:
    """
    –í—ã—Ä–µ–∑–∞–µ–º *–ø–æ–ª–Ω—ã–π* –∫–æ—Ä–Ω–µ–≤–æ–π –±–ª–æ–∫. –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π <div class="markup-seo-page"...>
    –∏ –µ–≥–æ *–ø–æ—Å–ª–µ–¥–Ω–∏–π* </div>.
    """
    t = (text or "").strip()
    start = t.find('<div class="markup-seo-page"')
    end   = t.rfind("</div>")
    if start != -1 and end != -1 and end > start:
        return t[start:end + 6]
    # –∑–∞–ø–∞—Å–Ω–æ–π —Ä–µ–≥–µ–∫—Å, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —Ñ–æ—Ä–º–∞—Ç –¥—Ä—É–≥–æ–π
    m = re.search(r'<div\s+class="markup-seo-page"[\s\S]*?</div>', t, re.I)
    return m.group(0) if m else t

def validate_markup(html_text: str) -> dict:
    issues, t = [], (html_text or "").strip()
    if not (t.startswith("<") and t.endswith(">")):
        issues.append("–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '<' –∏–ª–∏/–∏ –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è '>'")
    if 'class="markup-seo-page"' not in t:
        issues.append('–ù–µ –Ω–∞–π–¥–µ–Ω <div class="markup-seo-page">')

    a = len(re.findall(r"<a\b", t, re.I))
    if a != 7: issues.append(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ <a>: {a} (–æ–∂–∏–¥–∞–ª–æ—Å—å 7)")
    e = len(re.findall(r"<em\b", t, re.I))
    if e != 1: issues.append(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ <em>: {e} (–æ–∂–∏–¥–∞–ª–æ—Å—å 1)")

    tables = re.findall(r"<table[\s\S]*?</table>", t, re.I)
    if len(tables) != 3:
        issues.append(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ <table>: {len(tables)} (–æ–∂–∏–¥–∞–ª–æ—Å—å 3)")
    else:
        for i, need in enumerate([6, 3, 10]):
            rows = len(re.findall(r"<tr\b", tables[i], re.I)) if i < len(tables) else 0
            if rows != need:
                issues.append(f"–¢–∞–±–ª–∏—Ü–∞ #{i+1}: {rows} (–æ–∂–∏–¥–∞–ª–æ—Å—å {need})")

    faq = len(re.findall(r"<label\b[^>]*faq-accordion__item", t, re.I))
    if faq != 5: issues.append(f"FAQ –±–ª–æ–∫–∏: {faq} (–æ–∂–∏–¥–∞–ª–æ—Å—å 5)")
    return {"ok": not issues, "issues": issues, "length": len(t)}

def generate_with_retries(base_prompt: str, retries: int = 1) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ‚Üí –≤–∞–ª–∏–¥–∏—Ä—É–µ–º ‚Üí –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ 1 —Ä–∞–∑ –ø—Ä–æ—Å–∏–º –º–æ–¥–µ–ª—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏.
    (–ú–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å retries, –Ω–æ 1 –æ–±—ã—á–Ω–æ —Ö–≤–∞—Ç–∞–µ—Ç.)
    """
    html = extract_markup(call_openai(base_prompt))
    report = validate_markup(html)
    if report["ok"] or retries <= 0:
        return html

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ñ–∏–∫—Å-–ø–æ–¥—Å–∫–∞–∑
    fix_prompt = (
        "Fix the previous HTML to satisfy ALL constraints. "
        "Return ONLY the corrected HTML block, no explanations. "
        "Keep the TARGET HTML TEMPLATE structure and attributes 100% unchanged. "
        f"Issues: {', '.join(report['issues'])}\n\n"
        f"--- PREVIOUS HTML ---\n{html}\n--- END ---"
    )
    fixed = extract_markup(call_openai(fix_prompt))
    return fixed

# =====================
# UI
# =====================
st.title("üß© HTML Transformer ‚Äî Streamlit + OpenAI")

# –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å –∫–ª—é—á–æ–º ‚Äî —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ —á–∏—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ —Ñ–ª–∞–≥ –≤—ã—à–µ
raw = st.text_area(
    "–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç (–±—É–¥–µ—Ç –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω –≤ [RAW CONTENT])",
    key="raw_text",
    height=280,
    placeholder="–í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç –∑–¥–µ—Å—å‚Ä¶",
)

col1, col2 = st.columns([1, 1])
with col1:
    generate = st.button("üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å HTML", type="primary", use_container_width=True)
with col2:
    clear_btn = st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å", use_container_width=True)

# –û—á–∏—Å—Ç–∫–∞: —Ç–æ–ª—å–∫–æ —Å—Ç–∞–≤–∏–º —Ñ–ª–∞–≥ –∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
if clear_btn:
    st.session_state["do_clear"] = True
    st.rerun()

# –ñ—ë—Å—Ç–∫–æ —Å—Ç–æ–ø–∞–µ–º—Å—è –±–µ–∑ –∫–ª—é—á–∞
if not OPENAI_KEY:
    st.error("–ù–µ –Ω–∞–π–¥–µ–Ω OPENAI_API_KEY –≤ secrets.")
    st.stop()
if not BASE_PROMPT:
    st.warning("–ù–µ –Ω–∞–π–¥–µ–Ω HTML_PROMPT –≤ secrets (–≤—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –ø—Ä–æ–º–ø—Ç —Ü–µ–ª–∏–∫–æ–º).")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è
if generate:
    if not raw or not raw.strip():
        st.error("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
    else:
        text = raw.strip()
        if len(text) > MAX_RAW_CHARS:
            text = text[:MAX_RAW_CHARS] + "\n‚Ä¶ [–æ–±—Ä–µ–∑–∞–Ω–æ –¥–ª—è –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞]"
        prompt = build_prompt(text)
        with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è‚Ä¶"):
            try:
                html_block = generate_with_retries(prompt, retries=1)
            except Exception as e:
                st.exception(e)
                st.stop()
            st.session_state["generated_html"] = html_block

# –í—ã–≤–æ–¥
html = st.session_state.get("generated_html")
if html:
    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç")
    report = validate_markup(html)
    if report["ok"]:
        st.success("–ü—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã ‚úì")
    else:
        st.warning("–ï—Å—Ç—å –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è:")
        for item in report["issues"]:
            st.write("‚Ä¢ ", item)

    fname = f"markup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html"
    st.download_button("üíæ –°–∫–∞—á–∞—Ç—å HTML", html, fname, "text/html", use_container_width=True)

    st.divider()
    st.subheader("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä")
    components.html(html, height=PREVIEW_HEIGHT, scrolling=True)

    with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å —á–∏—Å—Ç—ã–π HTML"):
        st.code(html, language="html")

st.caption("‚ÑπÔ∏è –ü–æ—Å–ª–µ ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å HTML¬ª –Ω–∏–∂–µ –ø–æ—è–≤–∏—Ç—Å—è ¬´–†–µ–∑—É–ª—å—Ç–∞—Ç¬ª, –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –∫–Ω–æ–ø–∫–∞ ¬´–°–∫–∞—á–∞—Ç—å HTML¬ª.")
