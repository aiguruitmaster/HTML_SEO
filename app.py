import os
import re
from datetime import datetime

import streamlit as st
import streamlit.components.v1 as components
from openai import OpenAI

# =====================
# –°—Ç—Ä–∞–Ω–∏—Ü–∞ (–±–µ–∑ —Å–∞–π–¥–±–∞—Ä–∞)
# =====================
st.set_page_config(
    page_title="HTML Transformer (GPT-5)",
    page_icon="üß©",
    layout="wide",
    initial_sidebar_state="collapsed",
)
st.markdown(
    """
    <style>
      [data-testid="stSidebar"], [data-testid="collapsedControl"], header { display: none !important; }
      .block-container { padding-top: 2rem; }
      .stButton>button { height: 48px; font-weight: 600; }
    </style>
    """,
    unsafe_allow_html=True,
)

# =====================
# –°–µ–∫—Ä–µ—Ç—ã –∏ –∂—ë—Å—Ç–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
# =====================
OPENAI_KEY  = st.secrets.get("OPENAI_API_KEY", "")
BASE_PROMPT = st.secrets.get("HTML_PROMPT", "")

MODEL             = os.getenv("HTML_TRANSFORMER_MODEL", "gpt-4o-mini")  # ‚Üê –ø–æ—Å—Ç–∞–≤—å –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å
MAX_OUTPUT_TOKENS = int(os.getenv("HTML_MAX_OUTPUT_TOKENS", "2048"))
PREVIEW_HEIGHT    = int(os.getenv("HTML_PREVIEW_HEIGHT", "1400"))
MAX_RAW_CHARS     = int(os.getenv("HTML_MAX_RAW_CHARS", "200000"))
PLACEHOLDER       = "–¢—É—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –≤—Å—Ç–∞–≤–∏–ª —é–∑–µ—Ä"

# =====================
# –•–µ–ª–ø–µ—Ä—ã
# =====================
def build_prompt(raw_text: str) -> str:
    if PLACEHOLDER in BASE_PROMPT:
        return BASE_PROMPT.replace(PLACEHOLDER, raw_text)
    return f"{BASE_PROMPT}\n\n[RAW CONTENT]\n{raw_text}\n"

def call_openai(final_prompt: str) -> str:
    """–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º Responses API; –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è ‚Äî —Ñ–æ–ª–±—ç–∫ –Ω–∞ chat.completions."""
    client = OpenAI(api_key=OPENAI_KEY)
    # 1) Responses API
    try:
        resp = client.responses.create(
            model=MODEL,
            input=final_prompt,
            max_output_tokens=MAX_OUTPUT_TOKENS,
        )
        # –≤ –Ω–æ–≤—ã—Ö SDK –µ—Å—Ç—å —É–¥–æ–±–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ:
        if hasattr(resp, "output_text") and resp.output_text:
            return resp.output_text
        # —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞
        if getattr(resp, "output", None):
            parts = []
            for item in resp.output:
                for c in getattr(item, "content", []) or []:
                    if getattr(c, "type", "") == "output_text":
                        parts.append(getattr(c, "text", ""))
                    elif getattr(c, "type", "") == "text":
                        parts.append(getattr(c, "text", ""))
            if parts:
                return "".join(parts)
        # –µ—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ ‚Äî –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–ø–∞–¥—ë–º –≤ except –∏ –ø–æ–ø—Ä–æ–±—É–µ–º —Ñ–æ–ª–±—ç–∫
        raise RuntimeError("Responses API returned empty content")
    except Exception:
        # 2) Chat Completions (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏)
        resp = client.chat.completions.create(
            model=MODEL,
            messages=[{"role": "user", "content": final_prompt}],
            max_tokens=MAX_OUTPUT_TOKENS,
        )
        return resp.choices[0].message.content

def extract_markup(text: str) -> str:
    t = text.strip()
    if t.startswith("<") and t.endswith(">") and 'class="markup-seo-page"' in t:
        return t
    m = re.search(r'<div\s+class="markup-seo-page"[\s\S]*?</div>', t, re.I)
    return m.group(0) if m else t

def validate_markup(html_text: str) -> dict:
    issues, t = [], html_text.strip()
    if not (t.startswith("<") and t.endswith(">")):
        issues.append("–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '<' –∏–ª–∏/–∏ –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è '>'")
    if 'class="markup-seo-page"' not in t:
        issues.append('–ù–µ –Ω–∞–π–¥–µ–Ω <div class="markup-seo-page">')
    a = len(re.findall(r"<a\b", t, re.I))
    if a != 7: issues.append(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ <a>: {a} (–æ–∂–∏–¥–∞–ª–æ—Å—å 7)")
    e = len(re.findall(r"<em\b", t, re.I))
    if e != 1: issues.append(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ <em>: {e} (–æ–∂–∏–¥–∞–ª–æ—Å—å 1)")
    tables = re.findall(r"<table[\s\S]*?</table>", t, re.I)
    if len(tables) != 3:
        issues.append(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ <table>: {len(tables)} (–æ–∂–∏–¥–∞–ª–æ—Å—å 3)")
    else:
        for i, need in enumerate([6, 3, 10]):
            rows = len(re.findall(r"<tr\b", tables[i], re.I)) if i < len(tables) else 0
            if rows != need:
                issues.append(f"–¢–∞–±–ª–∏—Ü–∞ #{i+1}: {rows} (–æ–∂–∏–¥–∞–ª–æ—Å—å {need})")
    faq = len(re.findall(r"<label\b[^>]*faq-accordion__item", t, re.I))
    if faq != 5: issues.append(f"FAQ –±–ª–æ–∫–∏: {faq} (–æ–∂–∏–¥–∞–ª–æ—Å—å 5)")
    return {"ok": not issues, "issues": issues, "length": len(t)}

# =====================
# UI
# =====================
st.title("üß© HTML Transformer ‚Äî Streamlit + OpenAI")
st.caption("–í—Å—Ç–∞–≤—å—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç ‚Üí –º–æ–¥–µ–ª—å –≤–µ—Ä–Ω—ë—Ç –æ–¥–∏–Ω HTML-–±–ª–æ–∫ –ø–æ –≤–∞—à–µ–º—É —à–∞–±–ª–æ–Ω—É. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω—ã.")

# !!! –î–ê–Å–ú –ö–õ–Æ–ß, –ß–¢–û–ë–´ –ú–û–ñ–ù–û –ë–´–õ–û –û–ß–ò–©–ê–¢–¨ –ü–û–õ–ï
raw = st.text_area(
    "–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç (–±—É–¥–µ—Ç –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω –≤ [RAW CONTENT])",
    key="raw_text",
    height=280,
    placeholder="–í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç –∑–¥–µ—Å—å‚Ä¶",
)

col1, col2 = st.columns([1, 1])
with col1:
    generate = st.button("üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å HTML", type="primary", use_container_width=True)
with col2:
    clear_btn = st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å", use_container_width=True)

# –û—á–∏—Å—Ç–∫–∞: –∏ –ø–æ–ª–µ, –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
if clear_btn:
    st.session_state["raw_text"] = ""
    st.session_state.pop("generated_html", None)
    st.rerun()

# –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤ ‚Äî –∏ –ñ–Å–°–¢–ö–ò–ô STOP, –µ—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç
if not OPENAI_KEY:
    st.error("–ù–µ –Ω–∞–π–¥–µ–Ω OPENAI_API_KEY –≤ secrets.")
    st.stop()
if not BASE_PROMPT:
    st.warning("–ù–µ –Ω–∞–π–¥–µ–Ω HTML_PROMPT –≤ secrets (–≤—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –ø—Ä–æ–º–ø—Ç —Ü–µ–ª–∏–∫–æ–º).")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è
if generate:
    if not raw or not raw.strip():
        st.error("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
    else:
        text = raw.strip()
        if len(text) > MAX_RAW_CHARS:
            text = text[:MAX_RAW_CHARS] + "\n‚Ä¶ [–æ–±—Ä–µ–∑–∞–Ω–æ –¥–ª—è –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞]"
        prompt = build_prompt(text)
        with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è‚Ä¶"):
            try:
                html_block = call_openai(prompt)
                html_block = extract_markup(html_block)
            except Exception as e:
                st.exception(e)
                st.stop()
            st.session_state["generated_html"] = html_block

# –í—ã–≤–æ–¥
html = st.session_state.get("generated_html")
if html:
    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç")
    report = validate_markup(html)
    if report["ok"]:
        st.success("–ü—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã ‚úì")
    else:
        st.warning("–ï—Å—Ç—å –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è:")
        for item in report["issues"]:
            st.write("‚Ä¢ ", item)

    fname = f"markup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html"
    st.download_button("üíæ –°–∫–∞—á–∞—Ç—å HTML", html, fname, "text/html", use_container_width=True)

    st.divider()
    st.subheader("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä")
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ: components.html —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª—é–±–æ–π –≤–µ—Ä—Å–∏–∏ Streamlit
    components.html(html, height=PREVIEW_HEIGHT, scrolling=True)

    with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å —á–∏—Å—Ç—ã–π HTML"):
        st.code(html, language="html")

st.caption("‚ÑπÔ∏è –ü–æ—Å–ª–µ ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å HTML¬ª –Ω–∏–∂–µ –ø–æ—è–≤–∏—Ç—Å—è ¬´–†–µ–∑—É–ª—å—Ç–∞—Ç¬ª, –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –∫–Ω–æ–ø–∫–∞ ¬´–°–∫–∞—á–∞—Ç—å HTML¬ª.")
