# streamlit_app.py
import os
import re
from datetime import datetime

import streamlit as st
import streamlit.components.v1 as components
from openai import OpenAI

# =====================
# –°—Ç—Ä–∞–Ω–∏—Ü–∞
# =====================
st.set_page_config(page_title="HTML Transformer ‚Äî no fixes", page_icon="üß©", layout="wide")
st.markdown("""
<style>
  [data-testid="stSidebar"], [data-testid="collapsedControl"], header { display:none!important; }
  .block-container { padding-top: 2rem; }
  .stButton>button { height:48px; font-weight:600; }
</style>
""", unsafe_allow_html=True)

# =====================
# –ö–æ–Ω—Ñ–∏–≥/—Å–µ–∫—Ä–µ—Ç—ã
# =====================
OPENAI_KEY = st.secrets.get("OPENAI_API_KEY", "")

SECRET_KEYS = {
    "RocketPlay": ["HTML_PROMPT_RP", "HTML_PROMPT"],      # —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
    "WinSpirit / LuckyHills": ["HTML_PROMPT_WS_LH"],
    "Zoome": ["HTML_PROMPT_ZOOME"],
}

MODEL          = os.getenv("HTML_TRANSFORMER_MODEL", "gpt-4.1-mini")
PREVIEW_HEIGHT = int(os.getenv("HTML_PREVIEW_HEIGHT", "1200"))
PLACEHOLDER    = "–¢—É—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –≤—Å—Ç–∞–≤–∏–ª —é–∑–µ—Ä"

# =====================
# Session State
# =====================
st.session_state.setdefault("raw_text", "")
st.session_state.setdefault("result_text", None)
st.session_state.setdefault("do_clear", False)
st.session_state.setdefault("brand", "RocketPlay")
st.session_state.setdefault("wl_subbrand", "WinSpirit")  # –¥–ª—è WS/LH

if st.session_state.get("do_clear"):
    st.session_state["raw_text"] = ""
    st.session_state["result_text"] = None
    st.session_state["do_clear"] = False

# =====================
# –•–µ–ª–ø–µ—Ä—ã
# =====================
def resolve_base_prompt(brand: str) -> tuple[str, str]:
    keys = SECRET_KEYS.get(brand, [])
    for k in keys:
        v = st.secrets.get(k, "")
        if v:
            return v, k
    raise ValueError(f"–ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–æ–º–ø—Ç –¥–ª—è ¬´{brand}¬ª. –î–æ–±–∞–≤—å—Ç–µ —Å–µ–∫—Ä–µ—Ç(—ã): {', '.join(keys)}.")

def _inject_brand_line(text: str, brand_line: str) -> str:
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É BRAND_NAME: ... –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π —Å—ã—Ä–æ–≥–æ —Ç–µ–∫—Å—Ç–∞,
    –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç."""
    t = (text or "").lstrip()
    if re.search(r"^\s*BRAND_NAME\s*:", t, flags=re.IGNORECASE):
        return text  # —É–∂–µ –µ—Å—Ç—å
    return f"BRAND_NAME: {brand_line}\n{t}"

def build_prompt(base_prompt: str, raw_text: str, brand: str, wl_subbrand: str) -> str:
    """
    –ù–∞–¥—ë–∂–Ω–æ –≤—Å—Ç–∞–≤–ª—è–µ—Ç —Å—ã—Ä–æ–π —Ç–µ–∫—Å—Ç –≤ —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å–µ–∫—Ä–µ—Ç–æ–≤ –∏,
    –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–µ—Ç BRAND_NAME –¥–ª—è —Ç–æ—á–Ω–æ–π –¥–µ—Ç–µ–∫—Ü–∏–∏.
    """
    if not base_prompt:
        return raw_text

    rt = (raw_text or "").strip()
    out = base_prompt

    # --- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±—Ä–µ–Ω–¥-–æ–≤–µ—Ä–æ–≤ ---
    # –î–ª—è WS/LH ‚Äî —è–≤–Ω–æ –ø—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º BRAND_NAME –≤ SOURCE_TEXT.
    if brand == "WinSpirit / LuckyHills":
        rt = _inject_brand_line(rt, wl_subbrand)

    # –î–ª—è Zoome –º–æ–∂–Ω–æ –ø–æ–¥—Å—É–Ω—É—Ç—å –∂–µ–ª–∞–µ–º—ã–π –±—Ä–µ–Ω–¥ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ (–µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å):
    if brand == "Zoome":
        # –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç BRAND_NAME, –≤—Å—Ç–∞–≤–∏–º "Zoome" –∫–∞–∫ –¥–µ—Ñ–æ–ª—Ç ‚Äî –∏–ª–∏ –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π –±—Ä–µ–Ω–¥.
        rt = _inject_brand_line(rt, "Zoome")

    # --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ ---
    # [RAW CONTENT]
    out2 = re.sub(r"(\[RAW CONTENT\])", r"\1\n" + rt, out, count=1)
    if out2 != out:
        return out2

    # RocketPlay PLACEHOLDER
    out2 = out.replace(PLACEHOLDER, rt)
    if out2 != out:
        return out2

    # WS/LH: SOURCE_TEXT: <<...>>
    out2 = re.sub(
        r"(SOURCE_TEXT:\s*<<)(.*?)(>>)",
        lambda m: f"{m.group(1)}{rt}{m.group(3)}",
        out,
        count=1,
        flags=re.DOTALL,
    )
    if out2 != out:
        return out2

    # WS/LH: <<–í–°–¢–ê–í–¨ –ò–°–•–û–î–ù–´–ô –¢–ï–ö–°–¢>>
    out2 = out.replace("<<–í–°–¢–ê–í–¨ –ò–°–•–û–î–ù–´–ô –¢–ï–ö–°–¢>>", rt)
    if out2 != out:
        return out2

    # Zoome: –≤—Å—Ç–∞–≤–∫–∞ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ "–í–•–û–î"
    pattern_vhod = re.compile(r"(?:^|\n)–í–•–û–î\s*\n\s*$", flags=re.DOTALL)
    if pattern_vhod.search(out):
        return pattern_vhod.sub(lambda m: m.group(0) + rt + "\n", out, count=1)

    # Fallback ‚Äî –¥–æ–ø–∏—Å–∞—Ç—å –≤ –∫–æ–Ω–µ—Ü
    return out.rstrip() + "\n\n" + rt + "\n"

def strip_code_fences(t: str) -> str:
    t = (t or "").strip()
    if t.startswith("```"):
        t = t.split("\n", 1)[-1]
    if t.endswith("```"):
        t = t[:-3]
    return t.strip()

def call_openai(f_prompt: str) -> str:
    client = OpenAI(api_key=OPENAI_KEY)
    try:
        r = client.responses.create(
            model=MODEL,
            input=f_prompt,
            temperature=0,
            max_output_tokens=4096,
        )
        if getattr(r, "output_text", None):
            return strip_code_fences(r.output_text)
        if getattr(r, "output", None):
            parts = []
            for item in r.output:
                for c in getattr(item, "content", []) or []:
                    if getattr(c, "type", "") in ("output_text", "text"):
                        parts.append(getattr(c, "text", ""))
            if parts:
                return strip_code_fences("".join(parts))
        raise RuntimeError("Empty response")
    except Exception:
        c = client.chat.completions.create(
            model=MODEL,
            messages=[{"role": "user", "content": f_prompt}],
            temperature=0,
        )
        return strip_code_fences(c.choices[0].message.content)

def looks_like_html(s: str) -> bool:
    t = (s or "").strip().lower()
    return t.startswith("<!doctype") or (t.startswith("<") and "</" in t)

# =====================
# UI
# =====================
st.title("üß© HTML Transformer ‚Äî –ø—Ä–æ–º–ø—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π HTML")

brand_options = list(SECRET_KEYS.keys())
st.session_state["brand"] = st.selectbox(
    "–®–∞–±–ª–æ–Ω / –±—Ä–µ–Ω–¥",
    options=brand_options,
    index=brand_options.index(st.session_state.get("brand", "RocketPlay")),
)

# –ü–æ–¥–±—Ä–µ–Ω–¥ –¥–ª—è WS/LH
if st.session_state["brand"] == "WinSpirit / LuckyHills":
    st.session_state["wl_subbrand"] = st.radio(
        "–ü–æ–¥–±—Ä–µ–Ω–¥",
        options=["WinSpirit", "LuckyHills"],
        horizontal=True,
        index=0 if st.session_state.get("wl_subbrand") == "WinSpirit" else 1,
    )

raw = st.text_area(
    "–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç (–ø–æ–¥—Å—Ç–∞–≤–∏—Ç—Å—è –≤ –ø—Ä–æ–º–ø—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞)",
    key="raw_text", height=280, placeholder="–í—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç‚Ä¶",
)

c1, c2 = st.columns([1, 1])
with c1:
    generate = st.button("üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", type="primary", use_container_width=True)
with c2:
    if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å", use_container_width=True):
        st.session_state["do_clear"] = True
        st.rerun()

# –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã
if not OPENAI_KEY:
    st.error("–ù–µ –Ω–∞–π–¥–µ–Ω OPENAI_API_KEY –≤ secrets."); st.stop()

try:
    BASE_PROMPT, USED_SECRET_KEY = resolve_base_prompt(st.session_state["brand"])
    st.caption(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–µ–∫—Ä–µ—Ç: **{USED_SECRET_KEY}**")
except ValueError as e:
    st.error(str(e)); st.stop()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è
if generate:
    if not raw or not raw.strip():
        st.error("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.")
    else:
        with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è‚Ä¶"):
            try:
                prompt = build_prompt(
                    BASE_PROMPT,
                    raw.strip(),
                    st.session_state["brand"],
                    st.session_state.get("wl_subbrand", "WinSpirit"),
                )
                out = call_openai(prompt)
            except Exception as e:
                st.exception(e); st.stop()
            st.session_state["result_text"] = out

# –í—ã–≤–æ–¥
out = st.session_state.get("result_text")
if out:
    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)")
    if looks_like_html(out):
        components.html(out, height=PREVIEW_HEIGHT, scrolling=True)
        st.download_button(
            "üíæ –°–∫–∞—á–∞—Ç—å –∫–∞–∫ HTML",
            out,
            file_name=f"output_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html",
            mime="text/html",
            use_container_width=True,
        )
    else:
        st.write(out)

    with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç"):
        st.code(out, language="html")

st.caption("–ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–¥—ë—Ç —Å—Ç—Ä–æ–≥–æ –≤ —Å–µ–∫—Ä–µ—Ç–µ; –¥–ª—è WS/LH –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ BRAND_NAME: WinSpirit/LuckyHills –≤ SOURCE_TEXT, —á—Ç–æ–±—ã –º–æ–¥–µ–ª—å –Ω–µ –æ—à–∏–±–∞–ª–∞—Å—å —Å –±—Ä–µ–Ω–¥–æ–º. –ú–æ–¥–µ–ª—å ‚Äî temperature=0.")
