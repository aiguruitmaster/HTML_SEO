import os
import re
from datetime import datetime

import streamlit as st
import streamlit.components.v1 as components
from openai import OpenAI

# =====================
# Page config + no sidebar
# =====================
st.set_page_config(
    page_title="HTML Transformer (GPT-5)",
    page_icon="üß©",
    layout="wide",
    initial_sidebar_state="collapsed",
)
# –ñ—ë—Å—Ç–∫–æ –ø—Ä—è—á–µ–º —Å–∞–π–¥–±–∞—Ä/–±—É—Ä–≥–µ—Ä/–≤–µ—Ä—Ö–Ω–µ–µ –º–µ–Ω—é
st.markdown(
    """
    <style>
      [data-testid="stSidebar"],
      [data-testid="collapsedControl"],
      header { display: none !important; }
      .block-container { padding-top: 2rem; }
    </style>
    """,
    unsafe_allow_html=True,
)

# =====================
# Secrets & constants
# =====================
# –í .streamlit/secrets.toml:
# OPENAI_API_KEY = "sk-..."
# HTML_PROMPT   = """
#   –í–ê–® –ü–û–õ–ù–´–ô –ü–†–û–ú–ü–¢ (—Å [RAW CONTENT] –∏ TARGET HTML TEMPLATE)
# """
OPENAI_KEY = st.secrets.get("OPENAI_API_KEY", "")
BASE_PROMPT = st.secrets.get("HTML_PROMPT", "")

# –ñ—ë—Å—Ç–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
MODEL = os.getenv("HTML_TRANSFORMER_MODEL", "gpt-5")
MAX_OUTPUT_TOKENS = int(os.getenv("HTML_MAX_OUTPUT_TOKENS", "4096"))
TEMPERATURE = float(os.getenv("HTML_TEMPERATURE", "0.15"))
PREVIEW_HEIGHT = int(os.getenv("HTML_PREVIEW_HEIGHT", "1400"))
MAX_RAW_CHARS = int(os.getenv("HTML_MAX_RAW_CHARS", "200000"))  # –∑–∞—â–∏—Ç–∞ –æ—Ç —á—Ä–µ–∑–º–µ—Ä–Ω–æ –±–æ–ª—å—à–∏—Ö –≤—Å—Ç–∞–≤–æ–∫

PLACEHOLDER = "–¢—É—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –≤—Å—Ç–∞–≤–∏–ª —é–∑–µ—Ä"

# =====================
# Helpers
# =====================
def build_prompt(raw_text: str) -> str:
    """–ü–æ–¥—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –≤ —Å–µ–∫—Ü–∏—é [RAW CONTENT]."""
    if PLACEHOLDER in BASE_PROMPT:
        return BASE_PROMPT.replace(PLACEHOLDER, raw_text)
    return f"{BASE_PROMPT}\n\n[RAW CONTENT]\n{raw_text}\n"

def call_openai(final_prompt: str) -> str:
    client = OpenAI(api_key=OPENAI_KEY)
    resp = client.responses.create(
        model=MODEL,
        input=final_prompt,
        max_output_tokens=MAX_OUTPUT_TOKENS,
        temperature=TEMPERATURE,
    )
    return resp.output_text

def extract_markup(text: str) -> str:
    """–û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ <div class="markup-seo-page">‚Ä¶</div> –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –±–æ–ª—Ç–Ω—É–ª–∞ –ª–∏—à–Ω–µ–µ."""
    trimmed = text.strip()
    if trimmed.startswith("<") and trimmed.endswith(">") and 'class="markup-seo-page"' in trimmed:
        return trimmed
    m = re.search(r'<div\s+class="markup-seo-page"[\s\S]*?</div>', trimmed, re.I)
    return m.group(0) if m else trimmed

def validate_markup(html_text: str) -> dict:
    issues, t = [], html_text.strip()

    if not (t.startswith("<") and t.endswith(">")):
        issues.append("–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '<' –∏–ª–∏/–∏ –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è '>'")

    if 'class="markup-seo-page"' not in t:
        issues.append('–ù–µ –Ω–∞–π–¥–µ–Ω <div class="markup-seo-page">')

    if (a := len(re.findall(r"<a\b", t, re.I))) != 7:
        issues.append(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ <a>: {a} (–æ–∂–∏–¥–∞–ª–æ—Å—å 7)")

    if (e := len(re.findall(r"<em\b", t, re.I))) != 1:
        issues.append(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ <em>: {e} (–æ–∂–∏–¥–∞–ª–æ—Å—å 1)")

    tables = re.findall(r"<table[\s\S]*?</table>", t, re.I)
    if len(tables) != 3:
        issues.append(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ <table>: {len(tables)} (–æ–∂–∏–¥–∞–ª–æ—Å—å 3)")
    else:
        for i, need in enumerate([6, 3, 10]):
            rows = len(re.findall(r"<tr\b", tables[i], re.I)) if i < len(tables) else 0
            if rows != need:
                issues.append(f"–¢–∞–±–ª–∏—Ü–∞ #{i+1}: {rows} (–æ–∂–∏–¥–∞–ª–æ—Å—å {need})")

    if (faq := len(re.findall(r"<label\b[^>]*faq-accordion__item", t, re.I))) != 5:
        issues.append(f"FAQ –±–ª–æ–∫–∏: {faq} (–æ–∂–∏–¥–∞–ª–æ—Å—å 5)")

    return {"ok": not issues, "issues": issues, "length": len(t)}

# =====================
# UI (–±–µ–∑ —Å–∞–π–¥–±–∞—Ä–∞)
# =====================
st.title("üß© HTML Transformer ‚Äî Streamlit + OpenAI Responses API")
st.caption("–í—Å—Ç–∞–≤—å—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç ‚Üí –º–æ–¥–µ–ª—å –≤–µ—Ä–Ω—ë—Ç –æ–¥–∏–Ω HTML-–±–ª–æ–∫ –ø–æ –≤–∞—à–µ–º—É —à–∞–±–ª–æ–Ω—É. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω—ã.")

raw = st.text_area(
    "–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç (–±—É–¥–µ—Ç –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω –≤ [RAW CONTENT])",
    height=280,  # <‚Äî —Ñ–∏–∫—Å: –∏—Å–ø–æ–ª—å–∑—É–µ–º height –≤–º–µ—Å—Ç–æ min_height
    placeholder="–í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç –∑–¥–µ—Å—å‚Ä¶",
)

col1, col2 = st.columns([1, 1])
with col1:
    generate = st.button("üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å HTML", type="primary", use_container_width=True)
with col2:
    clear_btn = st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å", use_container_width=True)

if clear_btn:
    st.session_state.pop("generated_html", None)
    st.experimental_rerun()

# –ü—Ä–µ–¥—É—Å–ª–æ–≤–∏—è
if not OPENAI_KEY:
    st.error("–ù–µ –Ω–∞–π–¥–µ–Ω OPENAI_API_KEY –≤ secrets.")
if not BASE_PROMPT:
    st.warning("–ù–µ –Ω–∞–π–¥–µ–Ω HTML_PROMPT –≤ secrets (–≤—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –ø—Ä–æ–º–ø—Ç —Ü–µ–ª–∏–∫–æ–º).")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è
if generate:
    if not raw or not raw.strip():
        st.error("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
    else:
        text = raw.strip()
        if len(text) > MAX_RAW_CHARS:
            text = text[:MAX_RAW_CHARS] + "\n‚Ä¶ [–æ–±—Ä–µ–∑–∞–Ω–æ –¥–ª—è –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞]"
        prompt = build_prompt(text)

        with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è‚Ä¶"):
            try:
                html_block = call_openai(prompt)
                html_block = extract_markup(html_block)
            except Exception as e:
                st.exception(e)
                st.stop()
            st.session_state["generated_html"] = html_block

# –í—ã–≤–æ–¥
if html := st.session_state.get("generated_html"):
    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç")

    report = validate_markup(html)
    if report["ok"]:
        st.success("–ü—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã ‚úì")
    else:
        st.warning("–ï—Å—Ç—å –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è:")
        for item in report["issues"]:
            st.write("‚Ä¢ ", item)

    fname = f"markup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html"
    st.download_button("üíæ –°–∫–∞—á–∞—Ç—å HTML", html, fname, "text/html", use_container_width=True)

    st.divider()
    st.subheader("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä")
    if hasattr(st, "html"):
        st.html(html)  # Streamlit 1.39+
    else:
        components.html(html, height=PREVIEW_HEIGHT, scrolling=True)

    with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å —á–∏—Å—Ç—ã–π HTML"):
        st.code(html, language="html")

st.caption("‚ÑπÔ∏è –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –†–û–í–ù–û –æ–¥–Ω–∏–º HTML-–±–ª–æ–∫–æ–º: –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å <div class=\"markup-seo-page\"> –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è </div>.")
